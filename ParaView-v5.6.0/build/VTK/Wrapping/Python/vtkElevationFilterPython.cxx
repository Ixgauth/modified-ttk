// python wrapper for vtkElevationFilter
//
#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include "vtkPythonArgs.h"
#include "vtkPythonOverload.h"
#include "vtkConfigure.h"
#include <cstddef>
#include <sstream>
#include "vtkVariant.h"
#include "vtkIndent.h"
#include "vtkElevationFilter.h"

extern "C" { VTK_ABI_EXPORT void PyVTKAddFile_vtkElevationFilter(PyObject *); }
extern "C" { VTK_ABI_EXPORT PyObject *PyvtkElevationFilter_ClassNew(); }

#ifndef DECLARED_PyvtkDataSetAlgorithm_ClassNew
extern "C" { PyObject *PyvtkDataSetAlgorithm_ClassNew(); }
#define DECLARED_PyvtkDataSetAlgorithm_ClassNew
#endif

static const char *PyvtkElevationFilter_Doc =
  "vtkElevationFilter - generate scalars along a specified direction\n\n"
  "Superclass: vtkDataSetAlgorithm\n\n"
  "vtkElevationFilter is a filter to generate scalar values from a\n"
  "dataset.  The scalar values lie within a user specified range, and\n"
  "are generated by computing a projection of each dataset point onto a\n"
  "line. The line can be oriented arbitrarily. A typical example is to\n"
  "generate scalars based on elevation or height above a plane.\n\n"
  "@warning\n"
  "vtkSimpleElevationFilter may be easier to use in many cases; e.g.,\n"
  "compute vertical elevation above zero z-point.\n\n"
  "@warning\n"
  "This class has been threaded with vtkSMPTools. Using TBB or other\n"
  "non-sequential type (set in the CMake variable\n"
  "VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.\n\n"
  "@sa\n"
  "vtkSimpleElevationFilter\n\n";


static PyObject *
PyvtkElevationFilter_IsTypeOf(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "IsTypeOf");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = vtkElevationFilter::IsTypeOf(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkElevationFilter_IsA(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "IsA");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = (ap.IsBound() ?
      op->IsA(temp0) :
      op->vtkElevationFilter::IsA(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkElevationFilter_SafeDownCast(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "SafeDownCast");

  vtkObjectBase *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkObjectBase"))
  {
    vtkElevationFilter *tempr = vtkElevationFilter::SafeDownCast(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkElevationFilter_NewInstance(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "NewInstance");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    vtkElevationFilter *tempr = (ap.IsBound() ?
      op->NewInstance() :
      op->vtkElevationFilter::NewInstance());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
      if (result && PyVTKObject_Check(result))
      {
        PyVTKObject_GetObject(result)->UnRegister(0);
        PyVTKObject_SetFlag(result, VTK_PYTHON_IGNORE_UNREGISTER, 1);
      }
    }
  }

  return result;
}


static PyObject *
PyvtkElevationFilter_SetLowPoint_s1(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetLowPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  double temp0;
  double temp1;
  double temp2;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(3) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetValue(temp2))
  {
    if (ap.IsBound())
    {
      op->SetLowPoint(temp0, temp1, temp2);
    }
    else
    {
      op->vtkElevationFilter::SetLowPoint(temp0, temp1, temp2);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkElevationFilter_SetLowPoint_s2(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetLowPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  const size_t size0 = 3;
  double temp0[3];
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetArray(temp0, size0))
  {
    if (ap.IsBound())
    {
      op->SetLowPoint(temp0);
    }
    else
    {
      op->vtkElevationFilter::SetLowPoint(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkElevationFilter_SetLowPoint(PyObject *self, PyObject *args)
{
  int nargs = vtkPythonArgs::GetArgCount(self, args);

  switch(nargs)
  {
    case 3:
      return PyvtkElevationFilter_SetLowPoint_s1(self, args);
    case 1:
      return PyvtkElevationFilter_SetLowPoint_s2(self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "SetLowPoint");
  return nullptr;
}



static PyObject *
PyvtkElevationFilter_GetLowPoint(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetLowPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  size_t sizer = 3;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    double *tempr = (ap.IsBound() ?
      op->GetLowPoint() :
      op->vtkElevationFilter::GetLowPoint());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildTuple(tempr, sizer);
    }
  }

  return result;
}


static PyObject *
PyvtkElevationFilter_SetHighPoint_s1(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetHighPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  double temp0;
  double temp1;
  double temp2;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(3) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetValue(temp2))
  {
    if (ap.IsBound())
    {
      op->SetHighPoint(temp0, temp1, temp2);
    }
    else
    {
      op->vtkElevationFilter::SetHighPoint(temp0, temp1, temp2);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkElevationFilter_SetHighPoint_s2(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetHighPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  const size_t size0 = 3;
  double temp0[3];
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetArray(temp0, size0))
  {
    if (ap.IsBound())
    {
      op->SetHighPoint(temp0);
    }
    else
    {
      op->vtkElevationFilter::SetHighPoint(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkElevationFilter_SetHighPoint(PyObject *self, PyObject *args)
{
  int nargs = vtkPythonArgs::GetArgCount(self, args);

  switch(nargs)
  {
    case 3:
      return PyvtkElevationFilter_SetHighPoint_s1(self, args);
    case 1:
      return PyvtkElevationFilter_SetHighPoint_s2(self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "SetHighPoint");
  return nullptr;
}



static PyObject *
PyvtkElevationFilter_GetHighPoint(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetHighPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  size_t sizer = 3;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    double *tempr = (ap.IsBound() ?
      op->GetHighPoint() :
      op->vtkElevationFilter::GetHighPoint());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildTuple(tempr, sizer);
    }
  }

  return result;
}


static PyObject *
PyvtkElevationFilter_SetScalarRange_s1(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetScalarRange");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  double temp0;
  double temp1;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(2) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1))
  {
    if (ap.IsBound())
    {
      op->SetScalarRange(temp0, temp1);
    }
    else
    {
      op->vtkElevationFilter::SetScalarRange(temp0, temp1);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkElevationFilter_SetScalarRange_s2(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetScalarRange");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  const size_t size0 = 2;
  double temp0[2];
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetArray(temp0, size0))
  {
    if (ap.IsBound())
    {
      op->SetScalarRange(temp0);
    }
    else
    {
      op->vtkElevationFilter::SetScalarRange(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkElevationFilter_SetScalarRange(PyObject *self, PyObject *args)
{
  int nargs = vtkPythonArgs::GetArgCount(self, args);

  switch(nargs)
  {
    case 2:
      return PyvtkElevationFilter_SetScalarRange_s1(self, args);
    case 1:
      return PyvtkElevationFilter_SetScalarRange_s2(self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "SetScalarRange");
  return nullptr;
}



static PyObject *
PyvtkElevationFilter_GetScalarRange(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetScalarRange");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkElevationFilter *op = static_cast<vtkElevationFilter *>(vp);

  size_t sizer = 2;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    double *tempr = (ap.IsBound() ?
      op->GetScalarRange() :
      op->vtkElevationFilter::GetScalarRange());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildTuple(tempr, sizer);
    }
  }

  return result;
}

static PyMethodDef PyvtkElevationFilter_Methods[] = {
  {"IsTypeOf", PyvtkElevationFilter_IsTypeOf, METH_VARARGS,
   "V.IsTypeOf(string) -> int\nC++: static vtkTypeBool IsTypeOf(const char *type)\n\nReturn 1 if this class type is the same type of (or a subclass\nof) the named class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"IsA", PyvtkElevationFilter_IsA, METH_VARARGS,
   "V.IsA(string) -> int\nC++: vtkTypeBool IsA(const char *type) override;\n\nReturn 1 if this class is the same type of (or a subclass of) the\nnamed class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"SafeDownCast", PyvtkElevationFilter_SafeDownCast, METH_VARARGS,
   "V.SafeDownCast(vtkObjectBase) -> vtkElevationFilter\nC++: static vtkElevationFilter *SafeDownCast(vtkObjectBase *o)\n\n"},
  {"NewInstance", PyvtkElevationFilter_NewInstance, METH_VARARGS,
   "V.NewInstance() -> vtkElevationFilter\nC++: vtkElevationFilter *NewInstance()\n\n"},
  {"SetLowPoint", PyvtkElevationFilter_SetLowPoint, METH_VARARGS,
   "V.SetLowPoint(float, float, float)\nC++: void SetLowPoint(double, double, double)\nV.SetLowPoint((float, float, float))\nC++: void SetLowPoint(double a[3])\n\n"},
  {"GetLowPoint", PyvtkElevationFilter_GetLowPoint, METH_VARARGS,
   "V.GetLowPoint() -> (float, float, float)\nC++: double *GetLowPoint()\n\nDefine one end of the line (small scalar values).  Default is\n(0,0,0).\n"},
  {"SetHighPoint", PyvtkElevationFilter_SetHighPoint, METH_VARARGS,
   "V.SetHighPoint(float, float, float)\nC++: void SetHighPoint(double, double, double)\nV.SetHighPoint((float, float, float))\nC++: void SetHighPoint(double a[3])\n\n"},
  {"GetHighPoint", PyvtkElevationFilter_GetHighPoint, METH_VARARGS,
   "V.GetHighPoint() -> (float, float, float)\nC++: double *GetHighPoint()\n\nDefine other end of the line (large scalar values).  Default is\n(0,0,1).\n"},
  {"SetScalarRange", PyvtkElevationFilter_SetScalarRange, METH_VARARGS,
   "V.SetScalarRange(float, float)\nC++: void SetScalarRange(double, double)\nV.SetScalarRange((float, float))\nC++: void SetScalarRange(double a[2])\n\n"},
  {"GetScalarRange", PyvtkElevationFilter_GetScalarRange, METH_VARARGS,
   "V.GetScalarRange() -> (float, float)\nC++: double *GetScalarRange()\n\nSpecify range to map scalars into.  Default is [0, 1].\n"},
  {nullptr, nullptr, 0, nullptr}
};

static PyTypeObject PyvtkElevationFilter_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "vtkFiltersCorePython.vtkElevationFilter", // tp_name
  sizeof(PyVTKObject), // tp_basicsize
  0, // tp_itemsize
  PyVTKObject_Delete, // tp_dealloc
  nullptr, // tp_print
  nullptr, // tp_getattr
  nullptr, // tp_setattr
  nullptr, // tp_compare
  PyVTKObject_Repr, // tp_repr
  nullptr, // tp_as_number
  nullptr, // tp_as_sequence
  nullptr, // tp_as_mapping
  nullptr, // tp_hash
  nullptr, // tp_call
  PyVTKObject_String, // tp_str
  PyObject_GenericGetAttr, // tp_getattro
  PyObject_GenericSetAttr, // tp_setattro
  &PyVTKObject_AsBuffer, // tp_as_buffer
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, // tp_flags
  PyvtkElevationFilter_Doc, // tp_doc
  PyVTKObject_Traverse, // tp_traverse
  nullptr, // tp_clear
  nullptr, // tp_richcompare
  offsetof(PyVTKObject, vtk_weakreflist), // tp_weaklistoffset
  nullptr, // tp_iter
  nullptr, // tp_iternext
  nullptr, // tp_methods
  nullptr, // tp_members
  PyVTKObject_GetSet, // tp_getset
  nullptr, // tp_base
  nullptr, // tp_dict
  nullptr, // tp_descr_get
  nullptr, // tp_descr_set
  offsetof(PyVTKObject, vtk_dict), // tp_dictoffset
  nullptr, // tp_init
  nullptr, // tp_alloc
  PyVTKObject_New, // tp_new
  PyObject_GC_Del, // tp_free
  nullptr, // tp_is_gc
  nullptr, // tp_bases
  nullptr, // tp_mro
  nullptr, // tp_cache
  nullptr, // tp_subclasses
  nullptr, // tp_weaklist
  VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED
};

static vtkObjectBase *PyvtkElevationFilter_StaticNew()
{
  return vtkElevationFilter::New();
}

PyObject *PyvtkElevationFilter_ClassNew()
{
  PyVTKClass_Add(
    &PyvtkElevationFilter_Type, PyvtkElevationFilter_Methods,
    "vtkElevationFilter",
 &PyvtkElevationFilter_StaticNew);

  PyTypeObject *pytype = &PyvtkElevationFilter_Type;

  if ((pytype->tp_flags & Py_TPFLAGS_READY) != 0)
  {
    return (PyObject *)pytype;
  }

#if !defined(VTK_PY3K) && PY_VERSION_HEX >= 0x02060000
  pytype->tp_flags |= Py_TPFLAGS_HAVE_NEWBUFFER;
#endif

  pytype->tp_base = (PyTypeObject *)PyvtkDataSetAlgorithm_ClassNew();

  PyType_Ready(pytype);
  return (PyObject *)pytype;
}

void PyVTKAddFile_vtkElevationFilter(
  PyObject *dict)
{
  PyObject *o;
  o = PyvtkElevationFilter_ClassNew();

  if (o && PyDict_SetItemString(dict, "vtkElevationFilter", o) != 0)
  {
    Py_DECREF(o);
  }

}

