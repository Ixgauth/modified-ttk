// python wrapper for vtkImageSimpleSource
//
#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include "vtkPythonArgs.h"
#include "vtkPythonOverload.h"
#include "vtkConfigure.h"
#include <cstddef>
#include <sstream>
#include "vtkVariant.h"
#include "vtkIndent.h"
#include "vtkImageSimpleSource.h"

extern "C" { VTK_ABI_EXPORT void PyVTKAddFile_vtkImageSimpleSource(PyObject *); }
extern "C" { VTK_ABI_EXPORT PyObject *PyvtkImageSimpleSource_ClassNew(); }

#ifndef DECLARED_PyvtkThreadedImageAlgorithm_ClassNew
extern "C" { PyObject *PyvtkThreadedImageAlgorithm_ClassNew(); }
#define DECLARED_PyvtkThreadedImageAlgorithm_ClassNew
#endif

static const char *PyvtkImageSimpleSource_Doc =
  "vtkImageSimpleSource - Create a 3-D image with simple-to-compute\npixel values.\n\n"
  "Superclass: vtkThreadedImageAlgorithm\n\n"
  "vtkImageSimpleSource produces images with pixel values that can be\n"
  "obtained with relatively low computational load. The output point\n"
  "data contains 1-3 arrays:\n"
  "- \"X\": A scalar double array labeled \"X\" is always generated. Its\n"
  "  values are set to the X coordinate at each point.\n"
  "- \"DistanceSquared\": A scalar double array labeled \"DistanceSquared\"\n"
  "  is generated by default, but can be omitted by setting\n"
  "  EnableDistanceSquaredData false. The values are set to the\n"
  "  Euclidean distance of each point from the origin (X*X + Y*Y + Z*Z).\n"
  "- \"Swirl\": A vector double array labeled \"Swirl\" is generated by\n"
  "  default, but can be omitted by setting EnableSwirlData false. The\n"
  "  values at each point are set to the <Y, Z, X> coordinates.\n\n";


static PyObject *
PyvtkImageSimpleSource_IsTypeOf(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "IsTypeOf");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = vtkImageSimpleSource::IsTypeOf(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_IsA(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "IsA");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = (ap.IsBound() ?
      op->IsA(temp0) :
      op->vtkImageSimpleSource::IsA(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_SafeDownCast(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "SafeDownCast");

  vtkObjectBase *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkObjectBase"))
  {
    vtkImageSimpleSource *tempr = vtkImageSimpleSource::SafeDownCast(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_NewInstance(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "NewInstance");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    vtkImageSimpleSource *tempr = (ap.IsBound() ?
      op->NewInstance() :
      op->vtkImageSimpleSource::NewInstance());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
      if (result && PyVTKObject_Check(result))
      {
        PyVTKObject_GetObject(result)->UnRegister(0);
        PyVTKObject_SetFlag(result, VTK_PYTHON_IGNORE_UNREGISTER, 1);
      }
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_GetWholeExtent(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetWholeExtent");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  size_t sizer = 6;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    int *tempr = (ap.IsBound() ?
      op->GetWholeExtent() :
      op->vtkImageSimpleSource::GetWholeExtent());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildTuple(tempr, sizer);
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_SetWholeExtent(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetWholeExtent");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  int temp0;
  int temp1;
  int temp2;
  int temp3;
  int temp4;
  int temp5;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(6) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetValue(temp2) &&
      ap.GetValue(temp3) &&
      ap.GetValue(temp4) &&
      ap.GetValue(temp5))
  {
    if (ap.IsBound())
    {
      op->SetWholeExtent(temp0, temp1, temp2, temp3, temp4, temp5);
    }
    else
    {
      op->vtkImageSimpleSource::SetWholeExtent(temp0, temp1, temp2, temp3, temp4, temp5);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_GetEnableDistanceSquaredData(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetEnableDistanceSquaredData");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    bool tempr = (ap.IsBound() ?
      op->GetEnableDistanceSquaredData() :
      op->vtkImageSimpleSource::GetEnableDistanceSquaredData());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_SetEnableDistanceSquaredData(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetEnableDistanceSquaredData");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  bool temp0 = false;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    if (ap.IsBound())
    {
      op->SetEnableDistanceSquaredData(temp0);
    }
    else
    {
      op->vtkImageSimpleSource::SetEnableDistanceSquaredData(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_EnableDistanceSquaredDataOn(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "EnableDistanceSquaredDataOn");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->EnableDistanceSquaredDataOn();
    }
    else
    {
      op->vtkImageSimpleSource::EnableDistanceSquaredDataOn();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_EnableDistanceSquaredDataOff(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "EnableDistanceSquaredDataOff");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->EnableDistanceSquaredDataOff();
    }
    else
    {
      op->vtkImageSimpleSource::EnableDistanceSquaredDataOff();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_GetEnableSwirlData(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetEnableSwirlData");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    bool tempr = (ap.IsBound() ?
      op->GetEnableSwirlData() :
      op->vtkImageSimpleSource::GetEnableSwirlData());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_SetEnableSwirlData(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetEnableSwirlData");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  bool temp0 = false;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    if (ap.IsBound())
    {
      op->SetEnableSwirlData(temp0);
    }
    else
    {
      op->vtkImageSimpleSource::SetEnableSwirlData(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_EnableSwirlDataOn(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "EnableSwirlDataOn");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->EnableSwirlDataOn();
    }
    else
    {
      op->vtkImageSimpleSource::EnableSwirlDataOn();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkImageSimpleSource_EnableSwirlDataOff(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "EnableSwirlDataOff");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkImageSimpleSource *op = static_cast<vtkImageSimpleSource *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->EnableSwirlDataOff();
    }
    else
    {
      op->vtkImageSimpleSource::EnableSwirlDataOff();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyMethodDef PyvtkImageSimpleSource_Methods[] = {
  {"IsTypeOf", PyvtkImageSimpleSource_IsTypeOf, METH_VARARGS,
   "V.IsTypeOf(string) -> int\nC++: static vtkTypeBool IsTypeOf(const char *type)\n\nReturn 1 if this class type is the same type of (or a subclass\nof) the named class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"IsA", PyvtkImageSimpleSource_IsA, METH_VARARGS,
   "V.IsA(string) -> int\nC++: vtkTypeBool IsA(const char *type) override;\n\nReturn 1 if this class is the same type of (or a subclass of) the\nnamed class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"SafeDownCast", PyvtkImageSimpleSource_SafeDownCast, METH_VARARGS,
   "V.SafeDownCast(vtkObjectBase) -> vtkImageSimpleSource\nC++: static vtkImageSimpleSource *SafeDownCast(vtkObjectBase *o)\n\n"},
  {"NewInstance", PyvtkImageSimpleSource_NewInstance, METH_VARARGS,
   "V.NewInstance() -> vtkImageSimpleSource\nC++: vtkImageSimpleSource *NewInstance()\n\n"},
  {"GetWholeExtent", PyvtkImageSimpleSource_GetWholeExtent, METH_VARARGS,
   "V.GetWholeExtent() -> (int, int, int, int, int, int)\nC++: int *GetWholeExtent()\n\n"},
  {"SetWholeExtent", PyvtkImageSimpleSource_SetWholeExtent, METH_VARARGS,
   "V.SetWholeExtent(int, int, int, int, int, int)\nC++: void SetWholeExtent(int xMinx, int xMax, int yMin, int yMax,\n    int zMin, int zMax)\n\n"},
  {"GetEnableDistanceSquaredData", PyvtkImageSimpleSource_GetEnableDistanceSquaredData, METH_VARARGS,
   "V.GetEnableDistanceSquaredData() -> bool\nC++: virtual bool GetEnableDistanceSquaredData()\n\nEnable/Disable DistanceSquared data array.\n"},
  {"SetEnableDistanceSquaredData", PyvtkImageSimpleSource_SetEnableDistanceSquaredData, METH_VARARGS,
   "V.SetEnableDistanceSquaredData(bool)\nC++: virtual void SetEnableDistanceSquaredData(bool _arg)\n\n"},
  {"EnableDistanceSquaredDataOn", PyvtkImageSimpleSource_EnableDistanceSquaredDataOn, METH_VARARGS,
   "V.EnableDistanceSquaredDataOn()\nC++: virtual void EnableDistanceSquaredDataOn()\n\n"},
  {"EnableDistanceSquaredDataOff", PyvtkImageSimpleSource_EnableDistanceSquaredDataOff, METH_VARARGS,
   "V.EnableDistanceSquaredDataOff()\nC++: virtual void EnableDistanceSquaredDataOff()\n\n"},
  {"GetEnableSwirlData", PyvtkImageSimpleSource_GetEnableSwirlData, METH_VARARGS,
   "V.GetEnableSwirlData() -> bool\nC++: virtual bool GetEnableSwirlData()\n\nEnable/Disable Swirl data array.\n"},
  {"SetEnableSwirlData", PyvtkImageSimpleSource_SetEnableSwirlData, METH_VARARGS,
   "V.SetEnableSwirlData(bool)\nC++: virtual void SetEnableSwirlData(bool _arg)\n\n"},
  {"EnableSwirlDataOn", PyvtkImageSimpleSource_EnableSwirlDataOn, METH_VARARGS,
   "V.EnableSwirlDataOn()\nC++: virtual void EnableSwirlDataOn()\n\n"},
  {"EnableSwirlDataOff", PyvtkImageSimpleSource_EnableSwirlDataOff, METH_VARARGS,
   "V.EnableSwirlDataOff()\nC++: virtual void EnableSwirlDataOff()\n\n"},
  {nullptr, nullptr, 0, nullptr}
};

static PyTypeObject PyvtkImageSimpleSource_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "vtkPVVTKExtensionsDefaultPython.vtkImageSimpleSource", // tp_name
  sizeof(PyVTKObject), // tp_basicsize
  0, // tp_itemsize
  PyVTKObject_Delete, // tp_dealloc
  nullptr, // tp_print
  nullptr, // tp_getattr
  nullptr, // tp_setattr
  nullptr, // tp_compare
  PyVTKObject_Repr, // tp_repr
  nullptr, // tp_as_number
  nullptr, // tp_as_sequence
  nullptr, // tp_as_mapping
  nullptr, // tp_hash
  nullptr, // tp_call
  PyVTKObject_String, // tp_str
  PyObject_GenericGetAttr, // tp_getattro
  PyObject_GenericSetAttr, // tp_setattro
  &PyVTKObject_AsBuffer, // tp_as_buffer
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, // tp_flags
  PyvtkImageSimpleSource_Doc, // tp_doc
  PyVTKObject_Traverse, // tp_traverse
  nullptr, // tp_clear
  nullptr, // tp_richcompare
  offsetof(PyVTKObject, vtk_weakreflist), // tp_weaklistoffset
  nullptr, // tp_iter
  nullptr, // tp_iternext
  nullptr, // tp_methods
  nullptr, // tp_members
  PyVTKObject_GetSet, // tp_getset
  nullptr, // tp_base
  nullptr, // tp_dict
  nullptr, // tp_descr_get
  nullptr, // tp_descr_set
  offsetof(PyVTKObject, vtk_dict), // tp_dictoffset
  nullptr, // tp_init
  nullptr, // tp_alloc
  PyVTKObject_New, // tp_new
  PyObject_GC_Del, // tp_free
  nullptr, // tp_is_gc
  nullptr, // tp_bases
  nullptr, // tp_mro
  nullptr, // tp_cache
  nullptr, // tp_subclasses
  nullptr, // tp_weaklist
  VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED
};

static vtkObjectBase *PyvtkImageSimpleSource_StaticNew()
{
  return vtkImageSimpleSource::New();
}

PyObject *PyvtkImageSimpleSource_ClassNew()
{
  PyVTKClass_Add(
    &PyvtkImageSimpleSource_Type, PyvtkImageSimpleSource_Methods,
    "vtkImageSimpleSource",
 &PyvtkImageSimpleSource_StaticNew);

  PyTypeObject *pytype = &PyvtkImageSimpleSource_Type;

  if ((pytype->tp_flags & Py_TPFLAGS_READY) != 0)
  {
    return (PyObject *)pytype;
  }

#if !defined(VTK_PY3K) && PY_VERSION_HEX >= 0x02060000
  pytype->tp_flags |= Py_TPFLAGS_HAVE_NEWBUFFER;
#endif

  pytype->tp_base = (PyTypeObject *)PyvtkThreadedImageAlgorithm_ClassNew();

  PyType_Ready(pytype);
  return (PyObject *)pytype;
}

void PyVTKAddFile_vtkImageSimpleSource(
  PyObject *dict)
{
  PyObject *o;
  o = PyvtkImageSimpleSource_ClassNew();

  if (o && PyDict_SetItemString(dict, "vtkImageSimpleSource", o) != 0)
  {
    Py_DECREF(o);
  }

}

