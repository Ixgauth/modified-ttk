// python wrapper for vtkKdTreeGenerator
//
#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include "vtkPythonArgs.h"
#include "vtkPythonOverload.h"
#include "vtkConfigure.h"
#include <cstddef>
#include <sstream>
#include "vtkVariant.h"
#include "vtkIndent.h"
#include "vtkKdTreeGenerator.h"

extern "C" { VTK_ABI_EXPORT void PyVTKAddFile_vtkKdTreeGenerator(PyObject *); }
extern "C" { VTK_ABI_EXPORT PyObject *PyvtkKdTreeGenerator_ClassNew(); }

#ifndef DECLARED_PyvtkObject_ClassNew
extern "C" { PyObject *PyvtkObject_ClassNew(); }
#define DECLARED_PyvtkObject_ClassNew
#endif

static const char *PyvtkKdTreeGenerator_Doc =
  "vtkKdTreeGenerator - creates a vtkPKdTree using the partitioning\ninformation provided by a vtkExtentTranslator.\n\n"
  "Superclass: vtkObject\n\n"
  "generates the KdTree\n\n"
  "vtkKdTreeGenerator is used to generate a KdTree using the\n"
  "partitioning information garnered from a vtkExtentTranslator (or\n"
  "subclass). Since we need spatial bounds for the KdTree, we assume\n"
  "that structured data corresponding to the vtkExtentTranslator is an\n"
  "ImageData with the provided spacing and origin. The algorithm used\n"
  "can be summarized as under:\n"
  "\\li Inputs: * Extent Translator, * Number of Pieces\n"
  "\\li Determine the bounds for every piece/region using the extent\n"
  "    translator.\n"
  "\\li Given a set of pieces (number of pieces > 1), we iteratively\n"
  "    determine\n"
  "    the plane along which the the pieces can be split into two\n"
  "    non-intersecting non-empty groups.\n"
  "\\li If number of pieces in a set of regions = 1, then we create a\n"
  "    leaf node\n"
  "    representing that region.\n"
  "\\li If number of pieces > 1, a new non-leaf node is creates with\n"
  "    children\n"
  "    as the subtree generated by repeating the same process on the\n"
  "    two non-intersecting, non-empty groups of pieces.\n\n\n"
  " vtkKdTreeGenerator also needs to determine the assignment of regions\n"
  "to\n"
  " the processors. Since vtkPKdTree assigns Ids to the leaf nodes in\n"
  "inorder,\n"
  " we can determine the assignment by assigning temporary ids to all\n"
  " leaf nodes indication the piece number they represent and simply\n"
  " traversing the tree in inorder, and recording only the leaf\n"
  " IDs.\n\n";


static PyObject *
PyvtkKdTreeGenerator_IsTypeOf(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "IsTypeOf");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = vtkKdTreeGenerator::IsTypeOf(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_IsA(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "IsA");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkKdTreeGenerator *op = static_cast<vtkKdTreeGenerator *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = (ap.IsBound() ?
      op->IsA(temp0) :
      op->vtkKdTreeGenerator::IsA(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_SafeDownCast(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "SafeDownCast");

  vtkObjectBase *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkObjectBase"))
  {
    vtkKdTreeGenerator *tempr = vtkKdTreeGenerator::SafeDownCast(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_NewInstance(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "NewInstance");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkKdTreeGenerator *op = static_cast<vtkKdTreeGenerator *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    vtkKdTreeGenerator *tempr = (ap.IsBound() ?
      op->NewInstance() :
      op->vtkKdTreeGenerator::NewInstance());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
      if (result && PyVTKObject_Check(result))
      {
        PyVTKObject_GetObject(result)->UnRegister(0);
        PyVTKObject_SetFlag(result, VTK_PYTHON_IGNORE_UNREGISTER, 1);
      }
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_SetKdTree(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetKdTree");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkKdTreeGenerator *op = static_cast<vtkKdTreeGenerator *>(vp);

  vtkPKdTree *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkPKdTree"))
  {
    if (ap.IsBound())
    {
      op->SetKdTree(temp0);
    }
    else
    {
      op->vtkKdTreeGenerator::SetKdTree(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_GetKdTree(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetKdTree");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkKdTreeGenerator *op = static_cast<vtkKdTreeGenerator *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    vtkPKdTree *tempr = (ap.IsBound() ?
      op->GetKdTree() :
      op->vtkKdTreeGenerator::GetKdTree());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_SetNumberOfPieces(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetNumberOfPieces");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkKdTreeGenerator *op = static_cast<vtkKdTreeGenerator *>(vp);

  int temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    if (ap.IsBound())
    {
      op->SetNumberOfPieces(temp0);
    }
    else
    {
      op->vtkKdTreeGenerator::SetNumberOfPieces(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_GetNumberOfPieces(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNumberOfPieces");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkKdTreeGenerator *op = static_cast<vtkKdTreeGenerator *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    int tempr = (ap.IsBound() ?
      op->GetNumberOfPieces() :
      op->vtkKdTreeGenerator::GetNumberOfPieces());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkKdTreeGenerator_BuildTree(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "BuildTree");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkKdTreeGenerator *op = static_cast<vtkKdTreeGenerator *>(vp);

  vtkExtentTranslator *temp0 = nullptr;
  const size_t size1 = 6;
  int temp1[6];
  const size_t size2 = 3;
  double temp2[3];
  const size_t size3 = 4;
  double temp3[4];
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(4) &&
      ap.GetVTKObject(temp0, "vtkExtentTranslator") &&
      ap.GetArray(temp1, size1) &&
      ap.GetArray(temp2, size2) &&
      ap.GetArray(temp3, size3))
  {
    bool tempr = (ap.IsBound() ?
      op->BuildTree(temp0, temp1, temp2, temp3) :
      op->vtkKdTreeGenerator::BuildTree(temp0, temp1, temp2, temp3));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}

static PyMethodDef PyvtkKdTreeGenerator_Methods[] = {
  {"IsTypeOf", PyvtkKdTreeGenerator_IsTypeOf, METH_VARARGS,
   "V.IsTypeOf(string) -> int\nC++: static vtkTypeBool IsTypeOf(const char *type)\n\nReturn 1 if this class type is the same type of (or a subclass\nof) the named class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"IsA", PyvtkKdTreeGenerator_IsA, METH_VARARGS,
   "V.IsA(string) -> int\nC++: vtkTypeBool IsA(const char *type) override;\n\nReturn 1 if this class is the same type of (or a subclass of) the\nnamed class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"SafeDownCast", PyvtkKdTreeGenerator_SafeDownCast, METH_VARARGS,
   "V.SafeDownCast(vtkObjectBase) -> vtkKdTreeGenerator\nC++: static vtkKdTreeGenerator *SafeDownCast(vtkObjectBase *o)\n\n"},
  {"NewInstance", PyvtkKdTreeGenerator_NewInstance, METH_VARARGS,
   "V.NewInstance() -> vtkKdTreeGenerator\nC++: vtkKdTreeGenerator *NewInstance()\n\n"},
  {"SetKdTree", PyvtkKdTreeGenerator_SetKdTree, METH_VARARGS,
   "V.SetKdTree(vtkPKdTree)\nC++: void SetKdTree(vtkPKdTree *)\n\nGet/Set the kdtree which is updated in BuildTree.\n"},
  {"GetKdTree", PyvtkKdTreeGenerator_GetKdTree, METH_VARARGS,
   "V.GetKdTree() -> vtkPKdTree\nC++: virtual vtkPKdTree *GetKdTree()\n\nGet/Set the kdtree which is updated in BuildTree.\n"},
  {"SetNumberOfPieces", PyvtkKdTreeGenerator_SetNumberOfPieces, METH_VARARGS,
   "V.SetNumberOfPieces(int)\nC++: virtual void SetNumberOfPieces(int _arg)\n\nGet/Set the number of pieces.\n"},
  {"GetNumberOfPieces", PyvtkKdTreeGenerator_GetNumberOfPieces, METH_VARARGS,
   "V.GetNumberOfPieces() -> int\nC++: virtual int GetNumberOfPieces()\n\nGet/Set the number of pieces.\n"},
  {"BuildTree", PyvtkKdTreeGenerator_BuildTree, METH_VARARGS,
   "V.BuildTree(vtkExtentTranslator, (int, int, int, int, int, int), (\n    float, float, float), (float, float, float, float)) -> bool\nC++: bool BuildTree(vtkExtentTranslator *translator,\n    const int extents[6], const double origin[3],\n    const double spacing[4])\n\nBuilds the KdTree using the partitioning of the data.\n"},
  {nullptr, nullptr, 0, nullptr}
};

static PyTypeObject PyvtkKdTreeGenerator_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "vtkPVVTKExtensionsRenderingPython.vtkKdTreeGenerator", // tp_name
  sizeof(PyVTKObject), // tp_basicsize
  0, // tp_itemsize
  PyVTKObject_Delete, // tp_dealloc
  nullptr, // tp_print
  nullptr, // tp_getattr
  nullptr, // tp_setattr
  nullptr, // tp_compare
  PyVTKObject_Repr, // tp_repr
  nullptr, // tp_as_number
  nullptr, // tp_as_sequence
  nullptr, // tp_as_mapping
  nullptr, // tp_hash
  nullptr, // tp_call
  PyVTKObject_String, // tp_str
  PyObject_GenericGetAttr, // tp_getattro
  PyObject_GenericSetAttr, // tp_setattro
  &PyVTKObject_AsBuffer, // tp_as_buffer
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, // tp_flags
  PyvtkKdTreeGenerator_Doc, // tp_doc
  PyVTKObject_Traverse, // tp_traverse
  nullptr, // tp_clear
  nullptr, // tp_richcompare
  offsetof(PyVTKObject, vtk_weakreflist), // tp_weaklistoffset
  nullptr, // tp_iter
  nullptr, // tp_iternext
  nullptr, // tp_methods
  nullptr, // tp_members
  PyVTKObject_GetSet, // tp_getset
  nullptr, // tp_base
  nullptr, // tp_dict
  nullptr, // tp_descr_get
  nullptr, // tp_descr_set
  offsetof(PyVTKObject, vtk_dict), // tp_dictoffset
  nullptr, // tp_init
  nullptr, // tp_alloc
  PyVTKObject_New, // tp_new
  PyObject_GC_Del, // tp_free
  nullptr, // tp_is_gc
  nullptr, // tp_bases
  nullptr, // tp_mro
  nullptr, // tp_cache
  nullptr, // tp_subclasses
  nullptr, // tp_weaklist
  VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED
};

static vtkObjectBase *PyvtkKdTreeGenerator_StaticNew()
{
  return vtkKdTreeGenerator::New();
}

PyObject *PyvtkKdTreeGenerator_ClassNew()
{
  PyVTKClass_Add(
    &PyvtkKdTreeGenerator_Type, PyvtkKdTreeGenerator_Methods,
    "vtkKdTreeGenerator",
 &PyvtkKdTreeGenerator_StaticNew);

  PyTypeObject *pytype = &PyvtkKdTreeGenerator_Type;

  if ((pytype->tp_flags & Py_TPFLAGS_READY) != 0)
  {
    return (PyObject *)pytype;
  }

#if !defined(VTK_PY3K) && PY_VERSION_HEX >= 0x02060000
  pytype->tp_flags |= Py_TPFLAGS_HAVE_NEWBUFFER;
#endif

  pytype->tp_base = (PyTypeObject *)PyvtkObject_ClassNew();

  PyType_Ready(pytype);
  return (PyObject *)pytype;
}

void PyVTKAddFile_vtkKdTreeGenerator(
  PyObject *dict)
{
  PyObject *o;
  o = PyvtkKdTreeGenerator_ClassNew();

  if (o && PyDict_SetItemString(dict, "vtkKdTreeGenerator", o) != 0)
  {
    Py_DECREF(o);
  }

}

