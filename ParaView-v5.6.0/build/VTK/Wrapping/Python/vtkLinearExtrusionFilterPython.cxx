// python wrapper for vtkLinearExtrusionFilter
//
#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include "vtkPythonArgs.h"
#include "vtkPythonOverload.h"
#include "vtkConfigure.h"
#include <cstddef>
#include <sstream>
#include "vtkVariant.h"
#include "vtkIndent.h"
#include "vtkLinearExtrusionFilter.h"

extern "C" { VTK_ABI_EXPORT void PyVTKAddFile_vtkLinearExtrusionFilter(PyObject *); }
extern "C" { VTK_ABI_EXPORT PyObject *PyvtkLinearExtrusionFilter_ClassNew(); }

#ifndef DECLARED_PyvtkPolyDataAlgorithm_ClassNew
extern "C" { PyObject *PyvtkPolyDataAlgorithm_ClassNew(); }
#define DECLARED_PyvtkPolyDataAlgorithm_ClassNew
#endif

static const char *PyvtkLinearExtrusionFilter_Doc =
  "vtkLinearExtrusionFilter - sweep polygonal data creating a \"skirt\"\nfrom free edges and lines, and lines from vertices\n\n"
  "Superclass: vtkPolyDataAlgorithm\n\n"
  "vtkLinearExtrusionFilter is a modeling filter. It takes polygonal\n"
  "data as input and generates polygonal data on output. The input\n"
  "dataset is swept according to some extrusion function and creates new\n"
  "polygonal primitives. These primitives form a \"skirt\" or swept\n"
  "surface. For example, sweeping a line results in a quadrilateral, and\n"
  "sweeping a triangle creates a \"wedge\".\n\n"
  "There are a number of control parameters for this filter. You can\n"
  "control whether the sweep of a 2D object (i.e., polygon or triangle\n"
  "strip) is capped with the generating geometry via the \"Capping\" ivar.\n"
  "Also, you can extrude in the direction of a user specified vector,\n"
  "towards a point, or in the direction of vertex normals (normals must\n"
  "be provided - use vtkPolyDataNormals if necessary). The amount of\n"
  "extrusion is controlled by the \"ScaleFactor\" instance variable.\n\n"
  "The skirt is generated by locating certain topological features. Free\n"
  "edges (edges of polygons or triangle strips only used by one polygon\n"
  "or triangle strips) generate surfaces. This is true also of lines or\n"
  "polylines. Vertices generate lines.\n\n"
  "This filter can be used to create 3D fonts, 3D irregular bar charts,\n"
  "or to model 2 1/2D objects like punched plates. It also can be used\n"
  "to create solid objects from 2D polygonal meshes.\n\n"
  "@warning\n"
  "Some polygonal objects have no free edges (e.g., sphere). When swept,\n"
  "this will result in two separate surfaces if capping is on, or no\n"
  "surface if capping is off.\n\n"
  "@sa\n"
  "vtkRotationalExtrusionFilter\n\n";


static PyObject *
PyvtkLinearExtrusionFilter_IsTypeOf(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "IsTypeOf");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = vtkLinearExtrusionFilter::IsTypeOf(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_IsA(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "IsA");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = (ap.IsBound() ?
      op->IsA(temp0) :
      op->vtkLinearExtrusionFilter::IsA(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SafeDownCast(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "SafeDownCast");

  vtkObjectBase *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkObjectBase"))
  {
    vtkLinearExtrusionFilter *tempr = vtkLinearExtrusionFilter::SafeDownCast(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_NewInstance(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "NewInstance");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    vtkLinearExtrusionFilter *tempr = (ap.IsBound() ?
      op->NewInstance() :
      op->vtkLinearExtrusionFilter::NewInstance());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
      if (result && PyVTKObject_Check(result))
      {
        PyVTKObject_GetObject(result)->UnRegister(0);
        PyVTKObject_SetFlag(result, VTK_PYTHON_IGNORE_UNREGISTER, 1);
      }
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetExtrusionType(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetExtrusionType");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  int temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    if (ap.IsBound())
    {
      op->SetExtrusionType(temp0);
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetExtrusionType(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_GetExtrusionTypeMinValue(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetExtrusionTypeMinValue");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    int tempr = (ap.IsBound() ?
      op->GetExtrusionTypeMinValue() :
      op->vtkLinearExtrusionFilter::GetExtrusionTypeMinValue());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_GetExtrusionTypeMaxValue(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetExtrusionTypeMaxValue");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    int tempr = (ap.IsBound() ?
      op->GetExtrusionTypeMaxValue() :
      op->vtkLinearExtrusionFilter::GetExtrusionTypeMaxValue());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_GetExtrusionType(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetExtrusionType");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    int tempr = (ap.IsBound() ?
      op->GetExtrusionType() :
      op->vtkLinearExtrusionFilter::GetExtrusionType());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetExtrusionTypeToVectorExtrusion(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetExtrusionTypeToVectorExtrusion");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->SetExtrusionTypeToVectorExtrusion();
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetExtrusionTypeToVectorExtrusion();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetExtrusionTypeToNormalExtrusion(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetExtrusionTypeToNormalExtrusion");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->SetExtrusionTypeToNormalExtrusion();
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetExtrusionTypeToNormalExtrusion();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetExtrusionTypeToPointExtrusion(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetExtrusionTypeToPointExtrusion");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->SetExtrusionTypeToPointExtrusion();
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetExtrusionTypeToPointExtrusion();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetCapping(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetCapping");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  int temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    if (ap.IsBound())
    {
      op->SetCapping(temp0);
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetCapping(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_GetCapping(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetCapping");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    int tempr = (ap.IsBound() ?
      op->GetCapping() :
      op->vtkLinearExtrusionFilter::GetCapping());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_CappingOn(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "CappingOn");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->CappingOn();
    }
    else
    {
      op->vtkLinearExtrusionFilter::CappingOn();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_CappingOff(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "CappingOff");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    if (ap.IsBound())
    {
      op->CappingOff();
    }
    else
    {
      op->vtkLinearExtrusionFilter::CappingOff();
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetScaleFactor(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetScaleFactor");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  double temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    if (ap.IsBound())
    {
      op->SetScaleFactor(temp0);
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetScaleFactor(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_GetScaleFactor(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetScaleFactor");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    double tempr = (ap.IsBound() ?
      op->GetScaleFactor() :
      op->vtkLinearExtrusionFilter::GetScaleFactor());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetVector_s1(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetVector");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  double temp0;
  double temp1;
  double temp2;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(3) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetValue(temp2))
  {
    if (ap.IsBound())
    {
      op->SetVector(temp0, temp1, temp2);
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetVector(temp0, temp1, temp2);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkLinearExtrusionFilter_SetVector_s2(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetVector");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  const size_t size0 = 3;
  double temp0[3];
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetArray(temp0, size0))
  {
    if (ap.IsBound())
    {
      op->SetVector(temp0);
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetVector(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkLinearExtrusionFilter_SetVector(PyObject *self, PyObject *args)
{
  int nargs = vtkPythonArgs::GetArgCount(self, args);

  switch(nargs)
  {
    case 3:
      return PyvtkLinearExtrusionFilter_SetVector_s1(self, args);
    case 1:
      return PyvtkLinearExtrusionFilter_SetVector_s2(self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "SetVector");
  return nullptr;
}



static PyObject *
PyvtkLinearExtrusionFilter_GetVector(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetVector");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  size_t sizer = 3;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    double *tempr = (ap.IsBound() ?
      op->GetVector() :
      op->vtkLinearExtrusionFilter::GetVector());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildTuple(tempr, sizer);
    }
  }

  return result;
}


static PyObject *
PyvtkLinearExtrusionFilter_SetExtrusionPoint_s1(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetExtrusionPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  double temp0;
  double temp1;
  double temp2;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(3) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetValue(temp2))
  {
    if (ap.IsBound())
    {
      op->SetExtrusionPoint(temp0, temp1, temp2);
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetExtrusionPoint(temp0, temp1, temp2);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkLinearExtrusionFilter_SetExtrusionPoint_s2(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetExtrusionPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  const size_t size0 = 3;
  double temp0[3];
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetArray(temp0, size0))
  {
    if (ap.IsBound())
    {
      op->SetExtrusionPoint(temp0);
    }
    else
    {
      op->vtkLinearExtrusionFilter::SetExtrusionPoint(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkLinearExtrusionFilter_SetExtrusionPoint(PyObject *self, PyObject *args)
{
  int nargs = vtkPythonArgs::GetArgCount(self, args);

  switch(nargs)
  {
    case 3:
      return PyvtkLinearExtrusionFilter_SetExtrusionPoint_s1(self, args);
    case 1:
      return PyvtkLinearExtrusionFilter_SetExtrusionPoint_s2(self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "SetExtrusionPoint");
  return nullptr;
}



static PyObject *
PyvtkLinearExtrusionFilter_GetExtrusionPoint(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetExtrusionPoint");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkLinearExtrusionFilter *op = static_cast<vtkLinearExtrusionFilter *>(vp);

  size_t sizer = 3;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    double *tempr = (ap.IsBound() ?
      op->GetExtrusionPoint() :
      op->vtkLinearExtrusionFilter::GetExtrusionPoint());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildTuple(tempr, sizer);
    }
  }

  return result;
}

static PyMethodDef PyvtkLinearExtrusionFilter_Methods[] = {
  {"IsTypeOf", PyvtkLinearExtrusionFilter_IsTypeOf, METH_VARARGS,
   "V.IsTypeOf(string) -> int\nC++: static vtkTypeBool IsTypeOf(const char *type)\n\nReturn 1 if this class type is the same type of (or a subclass\nof) the named class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"IsA", PyvtkLinearExtrusionFilter_IsA, METH_VARARGS,
   "V.IsA(string) -> int\nC++: vtkTypeBool IsA(const char *type) override;\n\nReturn 1 if this class is the same type of (or a subclass of) the\nnamed class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"SafeDownCast", PyvtkLinearExtrusionFilter_SafeDownCast, METH_VARARGS,
   "V.SafeDownCast(vtkObjectBase) -> vtkLinearExtrusionFilter\nC++: static vtkLinearExtrusionFilter *SafeDownCast(\n    vtkObjectBase *o)\n\n"},
  {"NewInstance", PyvtkLinearExtrusionFilter_NewInstance, METH_VARARGS,
   "V.NewInstance() -> vtkLinearExtrusionFilter\nC++: vtkLinearExtrusionFilter *NewInstance()\n\n"},
  {"SetExtrusionType", PyvtkLinearExtrusionFilter_SetExtrusionType, METH_VARARGS,
   "V.SetExtrusionType(int)\nC++: virtual void SetExtrusionType(int _arg)\n\nSet/Get the type of extrusion.\n"},
  {"GetExtrusionTypeMinValue", PyvtkLinearExtrusionFilter_GetExtrusionTypeMinValue, METH_VARARGS,
   "V.GetExtrusionTypeMinValue() -> int\nC++: virtual int GetExtrusionTypeMinValue()\n\nSet/Get the type of extrusion.\n"},
  {"GetExtrusionTypeMaxValue", PyvtkLinearExtrusionFilter_GetExtrusionTypeMaxValue, METH_VARARGS,
   "V.GetExtrusionTypeMaxValue() -> int\nC++: virtual int GetExtrusionTypeMaxValue()\n\nSet/Get the type of extrusion.\n"},
  {"GetExtrusionType", PyvtkLinearExtrusionFilter_GetExtrusionType, METH_VARARGS,
   "V.GetExtrusionType() -> int\nC++: virtual int GetExtrusionType()\n\nSet/Get the type of extrusion.\n"},
  {"SetExtrusionTypeToVectorExtrusion", PyvtkLinearExtrusionFilter_SetExtrusionTypeToVectorExtrusion, METH_VARARGS,
   "V.SetExtrusionTypeToVectorExtrusion()\nC++: void SetExtrusionTypeToVectorExtrusion()\n\nSet/Get the type of extrusion.\n"},
  {"SetExtrusionTypeToNormalExtrusion", PyvtkLinearExtrusionFilter_SetExtrusionTypeToNormalExtrusion, METH_VARARGS,
   "V.SetExtrusionTypeToNormalExtrusion()\nC++: void SetExtrusionTypeToNormalExtrusion()\n\nSet/Get the type of extrusion.\n"},
  {"SetExtrusionTypeToPointExtrusion", PyvtkLinearExtrusionFilter_SetExtrusionTypeToPointExtrusion, METH_VARARGS,
   "V.SetExtrusionTypeToPointExtrusion()\nC++: void SetExtrusionTypeToPointExtrusion()\n\nSet/Get the type of extrusion.\n"},
  {"SetCapping", PyvtkLinearExtrusionFilter_SetCapping, METH_VARARGS,
   "V.SetCapping(int)\nC++: virtual void SetCapping(vtkTypeBool _arg)\n\nTurn on/off the capping of the skirt.\n"},
  {"GetCapping", PyvtkLinearExtrusionFilter_GetCapping, METH_VARARGS,
   "V.GetCapping() -> int\nC++: virtual vtkTypeBool GetCapping()\n\nTurn on/off the capping of the skirt.\n"},
  {"CappingOn", PyvtkLinearExtrusionFilter_CappingOn, METH_VARARGS,
   "V.CappingOn()\nC++: virtual void CappingOn()\n\nTurn on/off the capping of the skirt.\n"},
  {"CappingOff", PyvtkLinearExtrusionFilter_CappingOff, METH_VARARGS,
   "V.CappingOff()\nC++: virtual void CappingOff()\n\nTurn on/off the capping of the skirt.\n"},
  {"SetScaleFactor", PyvtkLinearExtrusionFilter_SetScaleFactor, METH_VARARGS,
   "V.SetScaleFactor(float)\nC++: virtual void SetScaleFactor(double _arg)\n\nSet/Get extrusion scale factor,\n"},
  {"GetScaleFactor", PyvtkLinearExtrusionFilter_GetScaleFactor, METH_VARARGS,
   "V.GetScaleFactor() -> float\nC++: virtual double GetScaleFactor()\n\nSet/Get extrusion scale factor,\n"},
  {"SetVector", PyvtkLinearExtrusionFilter_SetVector, METH_VARARGS,
   "V.SetVector(float, float, float)\nC++: void SetVector(double, double, double)\nV.SetVector((float, float, float))\nC++: void SetVector(double a[3])\n\n"},
  {"GetVector", PyvtkLinearExtrusionFilter_GetVector, METH_VARARGS,
   "V.GetVector() -> (float, float, float)\nC++: double *GetVector()\n\nSet/Get extrusion vector. Only needs to be set if VectorExtrusion\nis turned on.\n"},
  {"SetExtrusionPoint", PyvtkLinearExtrusionFilter_SetExtrusionPoint, METH_VARARGS,
   "V.SetExtrusionPoint(float, float, float)\nC++: void SetExtrusionPoint(double, double, double)\nV.SetExtrusionPoint((float, float, float))\nC++: void SetExtrusionPoint(double a[3])\n\n"},
  {"GetExtrusionPoint", PyvtkLinearExtrusionFilter_GetExtrusionPoint, METH_VARARGS,
   "V.GetExtrusionPoint() -> (float, float, float)\nC++: double *GetExtrusionPoint()\n\nSet/Get extrusion point. Only needs to be set if PointExtrusion\nis turned on. This is the point towards which extrusion occurs.\n"},
  {nullptr, nullptr, 0, nullptr}
};

static PyTypeObject PyvtkLinearExtrusionFilter_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "vtkFiltersModelingPython.vtkLinearExtrusionFilter", // tp_name
  sizeof(PyVTKObject), // tp_basicsize
  0, // tp_itemsize
  PyVTKObject_Delete, // tp_dealloc
  nullptr, // tp_print
  nullptr, // tp_getattr
  nullptr, // tp_setattr
  nullptr, // tp_compare
  PyVTKObject_Repr, // tp_repr
  nullptr, // tp_as_number
  nullptr, // tp_as_sequence
  nullptr, // tp_as_mapping
  nullptr, // tp_hash
  nullptr, // tp_call
  PyVTKObject_String, // tp_str
  PyObject_GenericGetAttr, // tp_getattro
  PyObject_GenericSetAttr, // tp_setattro
  &PyVTKObject_AsBuffer, // tp_as_buffer
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, // tp_flags
  PyvtkLinearExtrusionFilter_Doc, // tp_doc
  PyVTKObject_Traverse, // tp_traverse
  nullptr, // tp_clear
  nullptr, // tp_richcompare
  offsetof(PyVTKObject, vtk_weakreflist), // tp_weaklistoffset
  nullptr, // tp_iter
  nullptr, // tp_iternext
  nullptr, // tp_methods
  nullptr, // tp_members
  PyVTKObject_GetSet, // tp_getset
  nullptr, // tp_base
  nullptr, // tp_dict
  nullptr, // tp_descr_get
  nullptr, // tp_descr_set
  offsetof(PyVTKObject, vtk_dict), // tp_dictoffset
  nullptr, // tp_init
  nullptr, // tp_alloc
  PyVTKObject_New, // tp_new
  PyObject_GC_Del, // tp_free
  nullptr, // tp_is_gc
  nullptr, // tp_bases
  nullptr, // tp_mro
  nullptr, // tp_cache
  nullptr, // tp_subclasses
  nullptr, // tp_weaklist
  VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED
};

static vtkObjectBase *PyvtkLinearExtrusionFilter_StaticNew()
{
  return vtkLinearExtrusionFilter::New();
}

PyObject *PyvtkLinearExtrusionFilter_ClassNew()
{
  PyVTKClass_Add(
    &PyvtkLinearExtrusionFilter_Type, PyvtkLinearExtrusionFilter_Methods,
    "vtkLinearExtrusionFilter",
 &PyvtkLinearExtrusionFilter_StaticNew);

  PyTypeObject *pytype = &PyvtkLinearExtrusionFilter_Type;

  if ((pytype->tp_flags & Py_TPFLAGS_READY) != 0)
  {
    return (PyObject *)pytype;
  }

#if !defined(VTK_PY3K) && PY_VERSION_HEX >= 0x02060000
  pytype->tp_flags |= Py_TPFLAGS_HAVE_NEWBUFFER;
#endif

  pytype->tp_base = (PyTypeObject *)PyvtkPolyDataAlgorithm_ClassNew();

  PyType_Ready(pytype);
  return (PyObject *)pytype;
}

void PyVTKAddFile_vtkLinearExtrusionFilter(
  PyObject *dict)
{
  PyObject *o;
  o = PyvtkLinearExtrusionFilter_ClassNew();

  if (o && PyDict_SetItemString(dict, "vtkLinearExtrusionFilter", o) != 0)
  {
    Py_DECREF(o);
  }

  for (int c = 0; c < 3; c++)
  {
    static const struct { const char *name; int value; }
      constants[3] = {
        { "VTK_VECTOR_EXTRUSION", 1 },
        { "VTK_NORMAL_EXTRUSION", 2 },
        { "VTK_POINT_EXTRUSION", 3 },
      };

    o = PyInt_FromLong(constants[c].value);
    if (o)
    {
      PyDict_SetItemString(dict, constants[c].name, o);
      Py_DECREF(o);
    }
  }

}

