// python wrapper for vtkPythonInterpreter
//
#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include "vtkPythonArgs.h"
#include "vtkPythonOverload.h"
#include "vtkConfigure.h"
#include <cstddef>
#include <sstream>
#include "vtkVariant.h"
#include "vtkIndent.h"
#include "vtkPythonInterpreter.h"

extern "C" { VTK_ABI_EXPORT void PyVTKAddFile_vtkPythonInterpreter(PyObject *); }
extern "C" { VTK_ABI_EXPORT PyObject *PyvtkPythonInterpreter_ClassNew(); }

#ifndef DECLARED_PyvtkObject_ClassNew
extern "C" { PyObject *PyvtkObject_ClassNew(); }
#define DECLARED_PyvtkObject_ClassNew
#endif

static const char *PyvtkPythonInterpreter_Doc =
  "vtkPythonInterpreter - wrapper for an embedded Python interpreter.\n\n"
  "Superclass: vtkObject\n\n"
  "vtkPythonInterpreter only offers static methods. However, there may\n"
  "be need to register callbacks to call after the Python interpreter is\n"
  "initialized and before the interpreter is finalized. One can register\n"
  "observers for vtkCommand:EnterEvent and vtkCommand::ExitEvent to a\n"
  "local instance of vtkPythonInterpreter. vtkPythonInterpreter keeps\n"
  "tracks of all instances and invokes those events on all instances at\n"
  "appropriate times.\n\n"
  "Same is true for obtaining outputs/errors generated by Python.\n"
  "vtkCommand::ErrorEvent and vtkCommand::SetOutputEvent will be fired\n"
  "with calldata being const char* to the messages. Errors and output\n"
  "messages will also be forwarded to the vtkOutputWindow singleton (via\n"
  "`vtkOutputWindowDisplayErrorText` and `vtkOutputWindowDisplayText`\n"
  "calls). Changing the output window temporarily (e.g. using a\n"
  "vtkStringOutputWindow) is another way of capturing messages generated\n"
  "through Python scripts.\n\n"
  "To capture stdin, especially for non-terminal applications, set\n"
  "CaptureStdin to true. In that case vtkCommand::UpdateEvent will be\n"
  "fired with the calldata being a reference to a vtkStdString that\n"
  "should be filled in with the text to be passed in as the input.\n\n"
  "A few of the methods on this class implicitly call\n"
  "vtkPythonInterpreter::Initialize() to ensure Python is initialized\n"
  "viz. vtkPythonInterpreter::PyMain() and\n"
  "vtkPythonInterpreter::RunSimpleString(). These implicit\n"
  "initialization always calls vtkPythonInterpreter::Initialize(1). If\n"
  "that's not what is expected, ensure that you call\n"
  "vtkPythonInterpreter::Initialize(0) before calling such methods.\n"
  "Refer to Py_InitializeEx() documentation for details on the\n"
  "differences between the two.\n\n"
  "Notes on calling Initialize/Finalize multiple times: Although\n"
  "applications are free to call Initialize/Finalize pairs multiple\n"
  "times, there are subtle differences between the first Initialize and\n"
  "subsequence Initialize calls after Finalize especially when\n"
  "concerning with imported modules. Refer to Python docs for details.\n"
  "In short, modules like numpy don't continue to work after a\n"
  "re-initialize. Hence use it with caution.\n\n";


static PyObject *
PyvtkPythonInterpreter_IsTypeOf(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "IsTypeOf");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = vtkPythonInterpreter::IsTypeOf(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_IsA(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "IsA");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkPythonInterpreter *op = static_cast<vtkPythonInterpreter *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = (ap.IsBound() ?
      op->IsA(temp0) :
      op->vtkPythonInterpreter::IsA(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_SafeDownCast(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "SafeDownCast");

  vtkObjectBase *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkObjectBase"))
  {
    vtkPythonInterpreter *tempr = vtkPythonInterpreter::SafeDownCast(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_NewInstance(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "NewInstance");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkPythonInterpreter *op = static_cast<vtkPythonInterpreter *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    vtkPythonInterpreter *tempr = (ap.IsBound() ?
      op->NewInstance() :
      op->vtkPythonInterpreter::NewInstance());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
      if (result && PyVTKObject_Check(result))
      {
        PyVTKObject_GetObject(result)->UnRegister(0);
        PyVTKObject_SetFlag(result, VTK_PYTHON_IGNORE_UNREGISTER, 1);
      }
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_Initialize(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "Initialize");

  int temp0 = 1;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(0, 1) &&
      (ap.NoArgsLeft() || ap.GetValue(temp0)))
  {
    bool tempr = vtkPythonInterpreter::Initialize(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_Finalize(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "Finalize");

  PyObject *result = nullptr;

  if (ap.CheckArgCount(0))
  {
    vtkPythonInterpreter::Finalize();

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_IsInitialized(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "IsInitialized");

  PyObject *result = nullptr;

  if (ap.CheckArgCount(0))
  {
    bool tempr = vtkPythonInterpreter::IsInitialized();

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_SetProgramName(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "SetProgramName");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    vtkPythonInterpreter::SetProgramName(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_RunSimpleString(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "RunSimpleString");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = vtkPythonInterpreter::RunSimpleString(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_PrependPythonPath(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "PrependPythonPath");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    vtkPythonInterpreter::PrependPythonPath(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_SetCaptureStdin(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "SetCaptureStdin");

  bool temp0 = false;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    vtkPythonInterpreter::SetCaptureStdin(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_GetCaptureStdin(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "GetCaptureStdin");

  PyObject *result = nullptr;

  if (ap.CheckArgCount(0))
  {
    bool tempr = vtkPythonInterpreter::GetCaptureStdin();

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkPythonInterpreter_GetPythonVerboseFlag(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "GetPythonVerboseFlag");

  PyObject *result = nullptr;

  if (ap.CheckArgCount(0))
  {
    int tempr = vtkPythonInterpreter::GetPythonVerboseFlag();

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}

static PyMethodDef PyvtkPythonInterpreter_Methods[] = {
  {"IsTypeOf", PyvtkPythonInterpreter_IsTypeOf, METH_VARARGS,
   "V.IsTypeOf(string) -> int\nC++: static vtkTypeBool IsTypeOf(const char *type)\n\nReturn 1 if this class type is the same type of (or a subclass\nof) the named class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"IsA", PyvtkPythonInterpreter_IsA, METH_VARARGS,
   "V.IsA(string) -> int\nC++: vtkTypeBool IsA(const char *type) override;\n\nReturn 1 if this class is the same type of (or a subclass of) the\nnamed class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"SafeDownCast", PyvtkPythonInterpreter_SafeDownCast, METH_VARARGS,
   "V.SafeDownCast(vtkObjectBase) -> vtkPythonInterpreter\nC++: static vtkPythonInterpreter *SafeDownCast(vtkObjectBase *o)\n\n"},
  {"NewInstance", PyvtkPythonInterpreter_NewInstance, METH_VARARGS,
   "V.NewInstance() -> vtkPythonInterpreter\nC++: vtkPythonInterpreter *NewInstance()\n\n"},
  {"Initialize", PyvtkPythonInterpreter_Initialize, METH_VARARGS,
   "V.Initialize(int) -> bool\nC++: static bool Initialize(int initsigs=1)\n\nCall this method to initialize Python. This has no effect if\nPython is already initialized. Returns true if Python was\ninitialized by this call, or false if Python was already\ninitialized. Although, one can call Initialize()/Finalize() pair\nmultiple times, Python documentation warns that \"Some extensions\nmay not work properly if their initialization routine is called\nmore than once; this can happen if an application calls\nPy_InitializeEx() and Py_Finalize() more than once.\"\n"},
  {"Finalize", PyvtkPythonInterpreter_Finalize, METH_VARARGS,
   "V.Finalize()\nC++: static void Finalize()\n\nCall this method to finalize Python. This has no effect if Python\nhasn't been initialized already.\n"},
  {"IsInitialized", PyvtkPythonInterpreter_IsInitialized, METH_VARARGS,
   "V.IsInitialized() -> bool\nC++: static bool IsInitialized()\n\nReturns true is Python is initialized.\n"},
  {"SetProgramName", PyvtkPythonInterpreter_SetProgramName, METH_VARARGS,
   "V.SetProgramName(string)\nC++: static void SetProgramName(const char *programname)\n\nSet the program name. This internally calls `Py_SetProgramName`.\nPython uses the program name to determine values for prefix and\nexec_prefix paths that are used to locate Python standard\nlibraries and hence call this if you if you know what you are\ndoing.\n\nIf not explicitly overridden, `Initialize` will try to guess a\ngood default for the `Py_SetProgramName` to  help find Python\nstandard libraries based on Python libraries used to build VTK.\n"},
  {"RunSimpleString", PyvtkPythonInterpreter_RunSimpleString, METH_VARARGS,
   "V.RunSimpleString(string) -> int\nC++: static int RunSimpleString(const char *script)\n\nDevelopers are free to call Python C API directly. This\nconvenience method is provided to overcome an issue with the\nPython interpreter with handling of DOS line endings. This will\ninitialize Python if not already initialized. Returns 0 on\nsuccess or -1 if a python exception was raised.\n"},
  {"PrependPythonPath", PyvtkPythonInterpreter_PrependPythonPath, METH_VARARGS,
   "V.PrependPythonPath(string)\nC++: static void PrependPythonPath(const char *)\n\nPrepends the path to the sys.path variable. If Python has been\ninitialized, this call will update the sys.path variable\notherwise the same will be done once Python has been initialized.\nThe paths added are saved so that if Python is initialized again\n(by calls to Initialize()), then these paths will be re-added.\n"},
  {"SetCaptureStdin", PyvtkPythonInterpreter_SetCaptureStdin, METH_VARARGS,
   "V.SetCaptureStdin(bool)\nC++: static void SetCaptureStdin(bool)\n\nTo capture stdin, especially for non-terminal applications, set\nCaptureStdin to true. In that case vtkCommand::UpdateEvent will\nbe fired with the calldata being a reference to a vtkStdString\nthat should be filled in with the text to be passed in as the\ninput.\n"},
  {"GetCaptureStdin", PyvtkPythonInterpreter_GetCaptureStdin, METH_VARARGS,
   "V.GetCaptureStdin() -> bool\nC++: static bool GetCaptureStdin()\n\nTo capture stdin, especially for non-terminal applications, set\nCaptureStdin to true. In that case vtkCommand::UpdateEvent will\nbe fired with the calldata being a reference to a vtkStdString\nthat should be filled in with the text to be passed in as the\ninput.\n"},
  {"GetPythonVerboseFlag", PyvtkPythonInterpreter_GetPythonVerboseFlag, METH_VARARGS,
   "V.GetPythonVerboseFlag() -> int\nC++: static int GetPythonVerboseFlag()\n\n"},
  {nullptr, nullptr, 0, nullptr}
};

static PyTypeObject PyvtkPythonInterpreter_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "vtkPythonInterpreterPython.vtkPythonInterpreter", // tp_name
  sizeof(PyVTKObject), // tp_basicsize
  0, // tp_itemsize
  PyVTKObject_Delete, // tp_dealloc
  nullptr, // tp_print
  nullptr, // tp_getattr
  nullptr, // tp_setattr
  nullptr, // tp_compare
  PyVTKObject_Repr, // tp_repr
  nullptr, // tp_as_number
  nullptr, // tp_as_sequence
  nullptr, // tp_as_mapping
  nullptr, // tp_hash
  nullptr, // tp_call
  PyVTKObject_String, // tp_str
  PyObject_GenericGetAttr, // tp_getattro
  PyObject_GenericSetAttr, // tp_setattro
  &PyVTKObject_AsBuffer, // tp_as_buffer
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, // tp_flags
  PyvtkPythonInterpreter_Doc, // tp_doc
  PyVTKObject_Traverse, // tp_traverse
  nullptr, // tp_clear
  nullptr, // tp_richcompare
  offsetof(PyVTKObject, vtk_weakreflist), // tp_weaklistoffset
  nullptr, // tp_iter
  nullptr, // tp_iternext
  nullptr, // tp_methods
  nullptr, // tp_members
  PyVTKObject_GetSet, // tp_getset
  nullptr, // tp_base
  nullptr, // tp_dict
  nullptr, // tp_descr_get
  nullptr, // tp_descr_set
  offsetof(PyVTKObject, vtk_dict), // tp_dictoffset
  nullptr, // tp_init
  nullptr, // tp_alloc
  PyVTKObject_New, // tp_new
  PyObject_GC_Del, // tp_free
  nullptr, // tp_is_gc
  nullptr, // tp_bases
  nullptr, // tp_mro
  nullptr, // tp_cache
  nullptr, // tp_subclasses
  nullptr, // tp_weaklist
  VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED
};

static vtkObjectBase *PyvtkPythonInterpreter_StaticNew()
{
  return vtkPythonInterpreter::New();
}

PyObject *PyvtkPythonInterpreter_ClassNew()
{
  PyVTKClass_Add(
    &PyvtkPythonInterpreter_Type, PyvtkPythonInterpreter_Methods,
    "vtkPythonInterpreter",
 &PyvtkPythonInterpreter_StaticNew);

  PyTypeObject *pytype = &PyvtkPythonInterpreter_Type;

  if ((pytype->tp_flags & Py_TPFLAGS_READY) != 0)
  {
    return (PyObject *)pytype;
  }

#if !defined(VTK_PY3K) && PY_VERSION_HEX >= 0x02060000
  pytype->tp_flags |= Py_TPFLAGS_HAVE_NEWBUFFER;
#endif

  pytype->tp_base = (PyTypeObject *)PyvtkObject_ClassNew();

  PyType_Ready(pytype);
  return (PyObject *)pytype;
}


static const char *PyvtkPythonGlobalInterpreters_Doc =
  "vtkPythonGlobalInterpreters - no description provided.\n\n"

  "vtkPythonGlobalInterpreters()\n";

static PyMethodDef PyvtkPythonGlobalInterpreters_Methods[] = {
  {nullptr, nullptr, 0, nullptr}
};


static PyObject *
PyvtkPythonGlobalInterpreters_vtkPythonGlobalInterpreters(PyObject *, PyObject *args)
{
  vtkPythonArgs ap(args, "vtkPythonGlobalInterpreters");

  PyObject *result = nullptr;

  if (ap.CheckArgCount(0))
  {
    vtkPythonGlobalInterpreters *op = new vtkPythonGlobalInterpreters();

    result = PyVTKSpecialObject_New("vtkPythonGlobalInterpreters", op);
  }

  return result;
}

static PyMethodDef PyvtkPythonGlobalInterpreters_vtkPythonGlobalInterpreters_Methods[] = {
  {nullptr, nullptr, 0, nullptr}
};

static PyObject *
PyvtkPythonGlobalInterpreters_New(PyTypeObject *, PyObject *args, PyObject *kwds)
{
  if (kwds && PyDict_Size(kwds))
  {
    PyErr_SetString(PyExc_TypeError,
                    "this function takes no keyword arguments");
    return nullptr;
  }

  return PyvtkPythonGlobalInterpreters_vtkPythonGlobalInterpreters(nullptr, args);
}

static void PyvtkPythonGlobalInterpreters_Delete(PyObject *self)
{
  PyVTKSpecialObject *obj = (PyVTKSpecialObject *)self;
  delete static_cast<vtkPythonGlobalInterpreters *>(obj->vtk_ptr);
  PyObject_Del(self);
}

static Py_hash_t PyvtkPythonGlobalInterpreters_Hash(PyObject *self)
{
#if PY_VERSION_HEX >= 0x020600B2
  return PyObject_HashNotImplemented(self);
#else
  char text[256];
  sprintf(text, "unhashable type: '%s'", Py_TYPE(self)->tp_name);
  PyErr_SetString(PyExc_TypeError, text);
  return -1;
#endif
}

static PyTypeObject PyvtkPythonGlobalInterpreters_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "vtkPythonInterpreterPython.vtkPythonGlobalInterpreters", // tp_name
  sizeof(PyVTKSpecialObject), // tp_basicsize
  0, // tp_itemsize
  PyvtkPythonGlobalInterpreters_Delete, // tp_dealloc
  nullptr, // tp_print
  nullptr, // tp_getattr
  nullptr, // tp_setattr
  nullptr, // tp_compare
  PyVTKSpecialObject_Repr, // tp_repr
  nullptr, // tp_as_number
  nullptr, // tp_as_sequence
  nullptr, // tp_as_mapping
  PyvtkPythonGlobalInterpreters_Hash, // tp_hash
  nullptr, // tp_call
  nullptr, // tp_str
  PyObject_GenericGetAttr, // tp_getattro
  nullptr, // tp_setattro
  nullptr, // tp_as_buffer
  Py_TPFLAGS_DEFAULT, // tp_flags
  PyvtkPythonGlobalInterpreters_Doc, // tp_doc
  nullptr, // tp_traverse
  nullptr, // tp_clear
  nullptr, // tp_richcompare
  0, // tp_weaklistoffset
  nullptr, // tp_iter
  nullptr, // tp_iternext
  nullptr, // tp_methods
  nullptr, // tp_members
  nullptr, // tp_getset
  nullptr, // tp_base
  nullptr, // tp_dict
  nullptr, // tp_descr_get
  nullptr, // tp_descr_set
  0, // tp_dictoffset
  nullptr, // tp_init
  nullptr, // tp_alloc
  PyvtkPythonGlobalInterpreters_New, // tp_new
  PyObject_Del, // tp_free
  nullptr, // tp_is_gc
  nullptr, // tp_bases
  nullptr, // tp_mro
  nullptr, // tp_cache
  nullptr, // tp_subclasses
  nullptr, // tp_weaklist
  VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED
};

extern "C" { VTK_ABI_EXPORT PyObject *PyvtkPythonGlobalInterpreters_TypeNew(); }

PyObject *PyvtkPythonGlobalInterpreters_TypeNew()
{
  PyVTKSpecialType_Add(
    &PyvtkPythonGlobalInterpreters_Type,
    PyvtkPythonGlobalInterpreters_Methods,
    PyvtkPythonGlobalInterpreters_vtkPythonGlobalInterpreters_Methods,
    nullptr);

  PyTypeObject *pytype = &PyvtkPythonGlobalInterpreters_Type;

  if ((pytype->tp_flags & Py_TPFLAGS_READY) != 0)
  {
    return (PyObject *)pytype;
  }

  PyType_Ready(pytype);
  return (PyObject *)pytype;
}

void PyVTKAddFile_vtkPythonInterpreter(
  PyObject *dict)
{
  PyObject *o;
  o = PyvtkPythonInterpreter_ClassNew();

  if (o && PyDict_SetItemString(dict, "vtkPythonInterpreter", o) != 0)
  {
    Py_DECREF(o);
  }

  o = PyvtkPythonGlobalInterpreters_TypeNew();

  if (o && PyDict_SetItemString(dict, "vtkPythonGlobalInterpreters", o) != 0)
  {
    Py_DECREF(o);
  }

}

